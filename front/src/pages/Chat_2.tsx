import React, { useState, useRef, useEffect } from 'react';
import ReactMarkdown from 'react-markdown';
import { Send, X } from 'lucide-react';

function Chat2() {
Â Â const [messages, setMessages] = useState<Array<{ type: 'user' | 'bot', content: string; animate?: boolean }>>([]);
Â Â const [input, setInput] = useState('');
Â Â const [isLoading, setIsLoading] = useState(false);
Â Â const [showNameModal, setShowNameModal] = useState(true);
Â Â const [firstName, setFirstName] = useState('');
Â Â const messagesEndRef = useRef<HTMLDivElement>(null);
Â Â const streamBuffer = useRef('');

Â Â const scrollToBottom = () => {
Â Â Â Â messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
Â Â };

Â Â const handleNameSubmit = (e: React.FormEvent) => {
Â Â Â Â e.preventDefault();
Â Â Â Â if (!firstName.trim()) return;
Â Â Â Â setShowNameModal(false);
Â Â Â Â 
Â Â Â Â // Add welcome message with animation and personalized greeting
Â Â Â Â const welcomeMessage = {
Â Â Â Â Â Â type: 'bot' as const,
Â Â Â Â Â Â content: `# Bonjour **${firstName}** ! ðŸŒŸ

je suis la pour t'aider Ã  rÃ©diger ta lettre de motivation`,
Â Â Â Â Â Â animate: true
Â Â Â Â };
Â Â Â Â 
Â Â Â Â setMessages([welcomeMessage]);
Â Â };

Â Â useEffect(() => {
Â Â Â Â scrollToBottom();
Â Â }, [messages]);

Â Â const handleSubmit = async (e: React.FormEvent) => {
Â Â Â Â e.preventDefault();
Â Â Â Â if (!input.trim()) return;

Â Â Â Â const userMessage = input.trim();
Â Â Â Â setMessages(prev => [...prev, { type: 'user', content: userMessage }]);
Â Â Â Â setInput('');
Â Â Â Â setIsLoading(true);
Â Â Â Â streamBuffer.current = ''; // Reset stream buffer

Â Â Â Â try {
Â Â Â Â Â Â // Add the name context to every query
Â Â Â Â Â Â const queryWithName = `je m'appelle ${firstName}. ${userMessage}`;
Â Â Â Â Â Â const response = await fetch(`http://127.0.0.1:8000/generate?query=${encodeURIComponent(queryWithName)}`);
Â Â Â Â Â Â const reader = response.body?.getReader();
Â Â Â Â Â Â const decoder = new TextDecoder();
Â Â Â Â Â Â 
Â Â Â Â Â Â if (!reader) {
Â Â Â Â Â Â Â Â throw new Error('No reader available');
Â Â Â Â Â Â }

Â Â Â Â Â Â // Add an initial bot message that we'll update
Â Â Â Â Â Â setMessages(prev => [...prev, { type: 'bot', content: '' }]);
Â Â Â Â Â Â 
Â Â Â Â Â Â while (true) {
Â Â Â Â Â Â Â Â const { done, value } = await reader.read();
Â Â Â Â Â Â Â Â if (done) break;
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â const chunk = decoder.decode(value);
Â Â Â Â Â Â Â Â streamBuffer.current += chunk;
Â Â Â Â Â Â Â Â 
Â Â Â Â Â Â Â Â // Update the last message with the complete buffer
Â Â Â Â Â Â Â Â setMessages(prev => {
Â Â Â Â Â Â Â Â Â Â const newMessages = [...prev];
Â Â Â Â Â Â Â Â Â Â const lastMessage = newMessages[newMessages.length - 1];
Â Â Â Â Â Â Â Â Â Â if (lastMessage.type === 'bot') {
Â Â Â Â Â Â Â Â Â Â Â Â lastMessage.content = streamBuffer.current;
Â Â Â Â Â Â Â Â Â Â }
Â Â Â Â Â Â Â Â Â Â return newMessages;
Â Â Â Â Â Â Â Â });
Â Â Â Â Â Â }
Â Â Â Â } catch (error) {
Â Â Â Â Â Â console.error('Error:', error);
Â Â Â Â Â Â setMessages(prev => [...prev, { type: 'bot', content: "DÃ©solÃ©, une erreur s'est produite." }]);
Â Â Â Â } finally {
Â Â Â Â Â Â setIsLoading(false);
Â Â Â Â }
Â Â };

Â Â return (
Â Â Â Â <div className="min-h-screen bg-gradient-to-br from-pink-50 to-purple-50 flex flex-col font-inter">
Â Â Â Â Â Â {/* Name Modal */}
Â Â Â Â Â Â {showNameModal && (
Â Â Â Â Â Â Â Â <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 animate-fade-in-up">
Â Â Â Â Â Â Â Â Â Â <div className="bg-white rounded-2xl p-8 shadow-xl max-w-md w-full mx-4">
Â Â Â Â Â Â Â Â Â Â Â Â <h2 className="gradient-text-pink text-2xl font-clash font-semibold mb-6">Bienvenue ! ðŸ‘‹</h2>
Â Â Â Â Â Â Â Â Â Â Â Â <form onSubmit={handleNameSubmit} className="space-y-6">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-2">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Comment puis-je vous appeler ?
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </label>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <input
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â type="text"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â id="firstName"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â value={firstName}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onChange={(e) => setFirstName(e.target.value)}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className="w-full rounded-xl border border-pink-200 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-pink-400 bg-white"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â placeholder="Votre prÃ©nom"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â autoFocus
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <button
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â type="submit"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className="w-full bg-gradient-to-r from-pink-400 to-purple-400 text-white rounded-xl px-6 py-3 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-pink-400 focus:ring-offset-2 transition-all duration-200 font-medium"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Commencer
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â Â Â </form>
Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â )}

Â Â Â Â Â Â <div className="flex-1 max-w-4xl w-full mx-auto p-4 flex flex-col">
Â Â Â Â Â Â Â Â <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl flex-1 flex flex-col overflow-hidden border border-pink-100">
Â Â Â Â Â Â Â Â Â Â {/* Messages container with padding bottom to account for fixed input */}
Â Â Â Â Â Â Â Â Â Â <div className="flex-1 overflow-y-auto p-6 pb-24 space-y-6">
Â Â Â Â Â Â Â Â Â Â Â Â {messages.map((message, index) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â key={index}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'} ${
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â message.animate ? 'animate-fade-in-up' : ''
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }`}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className={`max-w-[80%] rounded-2xl p-4 shadow-sm ${
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â message.type === 'user'
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ? 'bg-gradient-to-r from-pink-400 to-purple-400 text-white'
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â : 'bg-white border border-pink-100'
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }`}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {message.type === 'bot' ? (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className="prose prose-pink max-w-none">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <ReactMarkdown
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â components={{
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â h1: ({node, ...props}) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <h1 {...props} className="gradient-text-pink text-3xl font-clash font-semibold mb-4" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ),
                          h2: ({node, ...props}) => (
  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <h1 {...props} className="gradient-text-pink text-2xl font-clash font-semibold mb-4" />
  Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ),
                          h3: ({ node, ...props }) => (
                            <h3 {...props} className="gradient-text-pink text-xl font-clash font-semibold mb-3" />
                          ),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â strong: ({node, ...props}) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <strong {...props} className="gradient-text-pink font-semibold" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â p: ({node, ...props}) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p {...props} className="text-gray-800 mb-4 leading-relaxed" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ul: ({node, ...props}) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <ul {...props} className="list-disc list-inside space-y-2 mb-4 text-gray-700" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â li: ({node, ...props}) => (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <li {...props} className="text-gray-700" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ),
                          a: ({ node, ...props }) => (
                            <a 
                              {...props} 
                              className="gradient-text-pink underline decoration-pink-500 hover:decoration-pink-700"
                            />
                          ),
                          hr: () => (
                            <hr className="border-0 h-1 bg-gradient-to-r from-pink-400 to-purple-400 my-6 w-full rounded-lg" />
                          ),
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â }}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â {message.content}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </ReactMarkdown>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ) : (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <p className="text-white">{message.content}</p>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â ))}
Â Â Â Â Â Â Â Â Â Â Â Â {isLoading && (
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className="flex justify-start">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className="bg-white border border-pink-100 rounded-2xl p-4 shadow-sm">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className="flex space-x-2">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className="w-3 h-3 bg-pink-300 rounded-full animate-bounce" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className="w-3 h-3 bg-purple-300 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <div className="w-3 h-3 bg-blue-300 rounded-full animate-bounce" style={{ animationDelay: '0.4s' }} />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â Â Â )}
Â Â Â Â Â Â Â Â Â Â Â Â <div ref={messagesEndRef} />
Â Â Â Â Â Â Â Â Â Â </div>

Â Â Â Â Â Â Â Â Â Â {/* Fixed input at bottom */}
Â Â Â Â Â Â Â Â Â Â <form onSubmit={handleSubmit} className="absolute bottom-0 left-0 right-0 p-4 border-t border-pink-100 bg-white/95 backdrop-blur-sm">
Â Â Â Â Â Â Â Â Â Â Â Â <div className="flex space-x-4 max-w-4xl mx-auto">
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <input
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â type="text"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â value={input}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â onChange={(e) => setInput(e.target.value)}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â placeholder="Posez votre question..."
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className="flex-1 rounded-xl border border-pink-200 px-4 py-3 focus:outline-none focus:ring-2 focus:ring-pink-400 bg-white"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â disabled={isLoading}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â <button
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â type="submit"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â disabled={isLoading}
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â className="bg-gradient-to-r from-pink-400 to-purple-400 text-white rounded-xl px-6 py-3 hover:opacity-90 focus:outline-none focus:ring-2 focus:ring-pink-400 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
Â Â Â Â Â Â Â Â Â Â Â Â Â Â >
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Send className="w-5 h-5" />
Â Â Â Â Â Â Â Â Â Â Â Â Â Â </button>
Â Â Â Â Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â Â Â Â Â </form>
Â Â Â Â Â Â Â Â </div>
Â Â Â Â Â Â </div>
Â Â Â Â </div>
Â Â );
}

export default Chat2;